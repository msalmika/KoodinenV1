
@{
    Layout = "_CSharpAlkeetLayout";
    ViewData["Title"] = "Oppitunti4";
}

<h1>Oppitunti 4</h1>
<hr />
<p>
    Tällä oppitunnilla pääset tekemään propertyjä, kosntruktoreita ja opettelemaaan looppien käyttöä <br />
</p>

<p>
    Nämä tehtävät vaativat <a href="https://visualstudio.microsoft.com/">Visual Studion</a> lataamisen ja
    käyttöön ottamisen. Huomioitavaa tehtävien tekemisestä: tehtävän tekeminen vaatii koodin kääntämisen eli "Build" operaation. Koska tehtävätiedosto
    sisältää myös tehtävien tarkistuksen, käännä aina koko solution.
</p>

<p>
    Lataa oppitunnin tehtävät <a href="https://funcstorkoodinen.blob.core.windows.net/oppitunti-container/Oppitunti4.zip">tästä</a>.
</p>
<p>
    Pura Oppitunti4.zip-tiedosto ja avaa Oppitunti4 -hakemisto. Avaa Oppitunti4.sln Visual Studiolla ja sieltä klikkaa auki Program.cs.
</p>

<div class="card" style="padding: 20px; margin: 20px">
    <p>
        @if (ViewBag.SuoritettuTeht1 == null)
        {
            <h3>Tehtävä 1.</h3>
        }
        @if (ViewBag.SuoritettuTeht1 != null)
        {
            <h3 style="color: forestgreen">Tehtävä 1. <partial><strong style="color:mediumseagreen;font-size:20px">&#10003;</strong></partial></h3>
        }
        Tee "Loopit"-niminen luokka, siihen "Laskuri"-niminen property
        Tee luokalle konstruktori ja sitten metodi nimeltä "Laskenta".
        Lue tarkempi tehtävän anto program.cs:stä.
        Tehtävä tuottaa laskevan numerosarjan.
    </p>
</div>
<div>
    <h2>Switch-case -silmukka: valintaehtoa vastaavat lausekkeet</h2>
    <p>
        Switch -valintasilmukalla on mahdollista hakea määritettyjä case-tuloksia, jotka vastaavat niille määritettyä case-ehtomäärityksiä.
        Kokeiltavaa valintamääritystä verrataan iteroimalla switch-silmukkarakenteen case-ehtomääritteisiin, kunnes löytyy valintamääritystä vastaava ehto.
        Vastaavuuden löytyessä case-ehtoon liitetty toiminto toteutetaan tai siihen liitetty tuloslauseke palautetaan, ja silmukka päätetään yleensä break -komennolla.
        Mikäli iterointia ei päätetä millään komennolla case-ehtojen välissä, syntyy ns. loppumaton silmukka (“infinite loop”). <br /><br />
        Silmukka alkaa switch -komennolla, jonka perään asetetaan sulkeissa valintamääritteeksi asetetun muuttujan nimi. 
        Case -komennon perään tulee kaksoispisteet ja vertailtava case-ehtomäärite tai arvo, ja seuraavalle riville haluttu toiminto tai vastaavuuslauseke, 
        jonka löytyvä vastaavuus palauttaa silmukasta. Mikäli vastaavuuslauseke tai palautustoiminto ei itsessään katkaise silmukkaa, 
        tulee vielä seuraavalle riville kirjoittaa silmukan keskeyttämiskomento break. Usein switch-silmukkaan on myös asetettu default-case, 
        mikäli mikään silmukan case-ehto ei vastaa tarjottua valintamääritystä.Defult-case iteroituu automaattisesti aina viimeisenä.<br /><br />

        <b>Esimerkki switch-case -silmukasta: Hellerajat</b><br /><br />
        <span style="font-family:Courier New, Courier, monospace">
            - case-ehtona käytetään lämpötiloja (integer-tyyppinä)<br />
            - case-lausekkeet kuvastavat lämpötilaskaalan säämääritystä (string-tyyppinä)
            ja palautetaan konsoliprintillä Console.WriteLine(“vastaavuuslauseke”);<br />
            <br />
            ESIMERKKI:<br /><br />
            (->Pyydetään käyttäjältä syöte lämpötilalle)<br />
            Console.Write("Anna lämpötila ilman desimaaleja:"); 
            <br />
            (->Käännetään syötetty string-syöte integeriksi 
            ja tallennettaan syötetty arvo lämpötila-muuttujaan) <br />
            int lämpötila = Convert.ToInt32(Console.ReadLine()); 
            <br />
            (-> käytetään muuttujan arvoa case-vertailuun)
            <br /><br />
            switch (lämpötila) <br />
            {<br />
            case: < 0 <br />
            Console.WriteLine(“Pakkasraja”);<br />
            break;<br />
            <br />
            case: < 10<br />
            Console.WriteLine("Koleaa"):<br />
            break;<br />
            .<br />
            ...jne<br />
            .<br />
            default:<br />
            Console.WriteLine(“Mittaustulokselle ei löydy määritystä skaalassa.”);<br />
            break; <br />
            }
        </span><br />
    <h2>Switch-case silmukka</h2>
</div>
<div class="card" style="padding: 20px; margin: 20px">
    <p>
        @if (ViewBag.SuoritettuTeht2 == null)
        {
            <h3>Tehtävä 2.</h3>
        }
        @if (ViewBag.SuoritettuTeht2 != null)
        {
            <h3 style="color: forestgreen">Tehtävä 2. <partial><strong style="color:mediumseagreen;font-size:20px">&#10003;</strong></partial></h3>
        }
        Tee Oppitunti4 -projektiin "Switch" -niminen luokka ja luokan sisään "Day" -niminen property tyyppiä int tähän tyyliin: public int Day { get; set; } .
        Tee luokalle julkinen konstruktori johon laitat parametrin int Day ja aseta property konstruktoriin tähän tyyliin:<br />
        Public Switch (int day)
        {
        day = Day;
        }<br />
        Tee luokkaan konstruktorin lisäksi stringin palauttava metodi nimeltä Viikonpäivät,
        joka ottaa sisäänsä parametrinä int day-arvon: Viikonpäivät(int day). Täydennä metodin sisään switch-case -silmukka,
        jossa case-valintaehto edustaa viikonpäivän numeroa ja vastaava case-lauseke viikonpäivää kirjoitettuna string-tyyppimuodossa.
        Case-vastaavuuden lauseke palautetaan tässä tehtävässä sellaisenaan, ja käytettävä 6-kirjaiminen palautuskomento myös automaattisesti
        keskeyttää silmukan. Palautuskomento näin ollen tässä tapauksessa korvaa sekä konsoliprinttikomennon, että myöskin break komennon
        silmukassa. Lisää tekemääsi switch-silmukkaan  myös default-komento, joka palauttaa lauseen: "Anna viikonpäivän numero."

        Esimerkkinä: day:n arvoa 1 edustaa case-tulos "Maanantai"<br />
        switch (day)<br />
        {<br />
        case 1:<br />
        ?????? "Maanantai";<br />
        ....ja edelleen case 7:n, jota edustaa Sunnuntai, sekä default-komento palautuslauseineen.<br />
        }<br />

    </p>
</div>
<div class="card" style="padding: 20px; margin: 20px">
    <p>
        <h3>Tehtävä 3. </h3>
        Under construction...
    </p>
</div>
<div>
    <h2>Ehtorakenne</h2>
    <p>
        Usein on tarpeen määritellä ohjelmaan osia, jotka suoritetaan vain tietyissä tilanteissa.
        Esimerkiksi seuraava koodi tarkastaa, onko henkilö täysi-ikäinen:<br /><br />

        <span style="font-family:Courier New, Courier, monospace">
            int ikä = Convert.ToInt32(Console.ReadLine("Kuinka vanha olet? "));<br /><br />

            if (ikä > 17)<br />
            {<br />
            Console.WriteLine("Olet täysi-ikäinen!");<br />
            Console.WriteLine("Tässä siis sinulle ikiomaksi Doom Eternal.");<br />
            };<br /><br />

            Console.WriteLine("Seuraava asiakas, kiitos!");<br />
        </span><br /><br />

        Ohjelman suoritus näyttää tältä, kun ikä on suurempi kuin 17:<br /><br />

        <i>
            Kuinka vanha olet? <span style="color:red">18</span><br />
            Olet täysi-ikäinen!<br />
            Tässä siis sinulle ikiomaksi GTA6.<br />
            Seuraava asiakas, kiitos!
        </i><br /><br />

        Jos kuitenkaan ikä ei ole suurempi kuin 17, käy näin:<br /><br />

        <i>
            Kuinka vanha olet? <span style="color:red">16</span><br />
            Seuraava asiakas, kiitos!
        </i><br /><br />

        Esimerkkejä tarkastelemalla huomataan, että syötteenä annettu arvo vaikuttaa nyt siihen, mitkä osat ohjelmasta suoritetaan. Ohjelmassa on käytössä <i>ehtorakenne</i>, jonka sisällä oleva koodi suoritetaan vain, kun annettu ehto on tosi.<br />

        Ehtorakenteessa avainsanaa <span style="font-family:Courier New, Courier, monospace">if</span> seuraa jokin <i>ehto</i>, kuten kahden arvon vertailu. Tämän jälkeen tuleva koodi suoritetaan vain, jos ehto pitää paikkansa
    </p>
    <br />
    <br />
    <h2>Vertailuoperaattorit</h2>

</div>
<div class="card" style="padding: 20px; margin: 20px">
    <p>
        @if (ViewBag.SuoritettuTeht4 == null)
        {
            <h3>Tehtävä 4.</h3>
        }
        @if (ViewBag.SuoritettuTeht4 != null)
        {
            <h3 style="color: forestgreen">Tehtävä 4. <partial><strong style="color:mediumseagreen;font-size:20px">&#10003;</strong></partial></h3>
        }
        ITSEISARVO
        Tee Ehtolause-niminen luokka. Tee luokkaan metodi, joka ottaa parametrinä kokonaisluvun. Mikäli luku on pienempi kuin 0, ohjelma tulostaa luvun kerrottuna luvulla -1. Muulloin ohjelma tulostaa käyttäjän syöttämän luvun.
    </p>
</div>



<button class="btn btn-outline-primary" style="margin-left:20px">@Html.ActionLink("Rekisteröi oppitunti", "RekisteröiOppitunti", null, new { opId = 12, sivuNro = 4 })</button>


<button class="btn btn-outline-primary" style="margin-left:20px">@Html.ActionLink("Rekisteröi kurssi", "RekisteröiKurssi", null, new { opId = 12, sivuNro = 4 })</button>

<p>
    @if (ViewBag.OpViesti != null)
    {
        <a style="color:red">@ViewBag.OpViesti</a>
    }
</p>
<p>
    @if (ViewBag.Viesti != null)
    {
        <a style="color:red">@ViewBag.Viesti</a>
    }
</p>
